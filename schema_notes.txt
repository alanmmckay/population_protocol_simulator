Population Graph:
    <graph> ::= (<vertex set>,<edge set>)
   
    <vertex set> ::= {<vertices>}
    <vertices> ::= <vertex> <vertices-tail>
    <vertices-tail> ::= , <vertices> | e
    <vertex> ::= <STRING>

    <edge set> ::= {<edges>}
    <edges> ::= <edge> <edges-tail>
    <edges-tail> ::= , <edges> | e
    <edge> ::= <ordered-pair> | <unordered-pair>
    <ordered-pair> ::= (<vertex>,<vertex)
    <unordered-pair> ::= {<vertex>,<vertex>}
    

Transition Set:
    <transition set> ::= {<transitions>}
    <transitions> ::= <transition> <transitions-tail>
    <transitions-tail> ::= , <transition> | e
    <transition> ::= (<state list> -> <state list>)
    <state list> ::= [<states>]
    <states> ::= <state> <states-tail>
    <states-tail> := , <states> | e
    <state> ::= <STRING>

    
Init Set:
    <init set> ::= (<state associations>)
    <state associations> ::= <state association> <state associations-tail>
    <state associations-tail> ::= , <state associations> | e
    <state association> ::= {<vertex-set>:<state list>}
    <vertex-set> ::= {<vertex> <vertex-set-tail>}
    <vertex-set-tail> ::= , <vertex> <vertex-set-tail> | e
    
delimiter set:
    <delimiters> ::= [[<contextless delimiters>],[<encapsulating delimiters>]]
    <encapsulating delimiters> ::= [<openers>],[<closers>]

-Init set allows the association of an initial state to each vertex.
--example:
    Graph: ({a,b,c,d,e,f},{(a,b),(a,c),(d,f),(e,a)})
    Init: ({{a,b,c,d,e}:[1]},{{f}:[2]})
        //Vertices a,b,c,d,e will be given state 1 where f will have state 2

    
-The input and output functions can simply act as secondary transition 
functions.

-Read in the graph to establish the population's set of agents and their 
relationships
-Read in the transition function to describe the set of interactions agents may 
have
-Read in the Init set and associate each unique vertex with an initial state.

-Read in the input map to to give each agent within the population an initial 
state that is valid for the transition function.
-Read in the output map to get a set of valid outputs once the execution of the 
protocol is terminated

When analyzing associations, keep track of ordered pairs in a data structure. 
-If an ordered pair with identical agents is encountered, make the proper 
conversion to indicate bi-direction

